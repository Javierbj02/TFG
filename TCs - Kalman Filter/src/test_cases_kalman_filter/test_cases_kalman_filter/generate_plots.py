import os 
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import subprocess
import pickle
import matplotlib
matplotlib.use('Agg')

class GeneratePlots:
    def __init__(self, scenario, num_antennas, noise, test_case):
        self.path = "/home/javi2002bj/Escritorio/TFG_Webots/TFG/TCs - Kalman Filter/Results/Results " + test_case + "/" + noise + "/" + scenario + " " + num_antennas
        self.scenario = scenario
        self.num_antennas = num_antennas
        self.noise = noise
        self.df_positions = None
        self.test_case = test_case

    # PARA ESTO HACER UN STRATEGY PATTERN: Para ello, crear una clase abstracta GeneratePlots con un método abstracto generate_plots. 
    # Esta clase tendrá tres clases hijas, GeneratePlotsTC1, GeneratePlotsTC2 y GeneratePlotsTC3, que implementarán el método generate_plots de forma distinta.
    def generate_plots(self):
        if self.test_case == "TC1":
            self.generate_plots_tc1()
        elif self.test_case == "TC2":
            self.generate_plots_tc2()
        elif self.test_case == "TC3":
            self.generate_plots_tc3()
        else:
            print("Test case not found")
            return
        print("Plots generated in ", self.path)


    def generate_plots_tc1(self):
        plt.figure()
        plt.scatter(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', s=3, alpha=0.7, c = 'blue')
        plt.scatter(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', s=3, alpha=0.7, c = 'red')
        plt.xlabel('x position [mm]')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Ruta Real y Ruta Predicha')
        plt.legend()
        plt.xlim(-1400, -250)
        plt.ylim(2900, 4000)
        plt.grid(False)
        fig1_path = os.path.join(self.path, "graphic_s_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig1_path)

        plt.figure()
        plt.scatter(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', s=3, alpha=0.7, c = 'blue')
        plt.scatter(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', s=3, alpha=0.7, c = 'red')
        plt.xlabel('x position [mm]')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Ruta Real y Ruta Predicha')
        plt.legend()
        plt.xlim(-1500, 1500)
        plt.ylim(1500, 4500)
        plt.grid(False)
        fig2_path = os.path.join(self.path, "graphic_l_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig2_path)

        # Figuras con real, predicted por la Red neuronal, predicted por el filtro de Kalman
        plt.figure()
        plt.scatter(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', s=3, alpha=0.7, c = 'blue')
        plt.scatter(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', s=3, alpha=0.7, c = 'red')
        plt.scatter(self.df_positions["KalmanX"], self.df_positions["KalmanY"], label='Kalman Filter', s=3, alpha=0.7, c = 'green')
        plt.xlabel('x position [mm]')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Ruta Real, Ruta Predicha por la Red Neuronal y Ruta Predicha por el Filtro de Kalman')
        plt.legend()
        plt.xlim(-1400, -250)
        plt.ylim(2900, 4000)
        plt.grid(False)
        fig3_path = os.path.join(self.path, "graphic_s_kalman_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig3_path)

        plt.figure()
        plt.scatter(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', s=3, alpha=0.7, c = 'blue')
        plt.scatter(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', s=3, alpha=0.7, c = 'red')
        plt.scatter(self.df_positions["KalmanX"], self.df_positions["KalmanY"], label='Kalman Filter', s=3, alpha=0.7, c = 'green')
        plt.xlabel('x position [mm]')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Ruta Real, Ruta Predicha por la Red Neuronal y Ruta Predicha por el Filtro de Kalman')
        plt.legend()
        plt.xlim(-1500, 1500)
        plt.ylim(1500, 4500)
        plt.grid(False)
        fig4_path = os.path.join(self.path, "graphic_l_kalman_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig4_path)

        # Además, quiero una gráfica que muestre la linea de la ruta real, la ruta predicha por la red neuronal y la ruta predicha por el filtro de Kalman
        plt.figure()
        plt.plot(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', alpha=0.7, c = 'blue')
        plt.plot(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', alpha=0.7, c = 'red')
        plt.plot(self.df_positions["KalmanX"], self.df_positions["KalmanY"], label='Kalman Filter', alpha=0.7, c = 'green')
        plt.xlabel('x position [mm]')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Ruta Real, Ruta Predicha por la Red Neuronal y Ruta Predicha por el Filtro de Kalman')
        plt.legend()
        plt.xlim(-1400, -250)
        plt.ylim(2900, 4000)
        plt.grid(False)
        fig5_path = os.path.join(self.path, "graphic_s_kalman_line_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig5_path)

        plt.figure()
        plt.plot(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', alpha=0.7, c = 'blue')
        plt.plot(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', alpha=0.7, c = 'red')
        plt.plot(self.df_positions["KalmanX"], self.df_positions["KalmanY"], label='Kalman Filter', alpha=0.7, c = 'green')
        plt.xlabel('x position [mm]')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Ruta Real, Ruta Predicha por la Red Neuronal y Ruta Predicha por el Filtro de Kalman')
        plt.legend()
        plt.xlim(-1500, 1500)
        plt.ylim(1500, 4500)
        plt.grid(False)
        fig6_path = os.path.join(self.path, "graphic_l_kalman_line_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig6_path)

        # Ahora, quiero analizar por un lado la posición X: Real, Predicha por la Red Neuronal y Predicha por el Filtro de Kalman
        plt.figure()
        plt.plot(self.df_positions["RealX"], label='Ground truth', alpha=0.7, c = 'blue')
        plt.plot(self.df_positions["PredictedX"], label='Prediction', alpha=0.7, c = 'red')
        plt.plot(self.df_positions["KalmanX"], label='Kalman Filter', alpha=0.7, c = 'green')
        plt.xlabel('Time')
        plt.ylabel('x position [mm]')
        # plt.title('Comparación de Posición X Real, Predicha por la Red Neuronal y Predicha por el Filtro de Kalman')
        plt.legend()
        plt.grid(False)
        fig7_path = os.path.join(self.path, "graphic_x_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig7_path)

        # Ahora, quiero analizar por un lado la posición Y: Real, Predicha por la Red Neuronal y Predicha por el Filtro de Kalman
        plt.figure()
        plt.plot(self.df_positions["RealY"], label='Ground truth', alpha=0.7, c = 'blue')
        plt.plot(self.df_positions["PredictedY"], label='Prediction', alpha=0.7, c = 'red')
        plt.plot(self.df_positions["KalmanY"], label='Kalman Filter', alpha=0.7, c = 'green')
        plt.xlabel('Time')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Posición Y Real, Predicha por la Red Neuronal y Predicha por el Filtro de Kalman')
        plt.legend()
        plt.grid(False)
        fig8_path = os.path.join(self.path, "graphic_y_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig8_path)




    def generate_plots_tc2(self):
        # plt.figure()
        # plt.scatter(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', s=3, alpha=0.7, c = 'blue')
        # plt.scatter(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', s=3, alpha=0.7, c = 'red')
        # plt.xlabel('x position [mm]')
        # plt.ylabel('y position [mm]')
        # # plt.title('Comparación de Ruta Real y Ruta Predicha')
        # plt.legend()
        # plt.xlim(-1400, -250)
        # plt.ylim(2900, 4000)
        # plt.grid(False)
        # fig1_path = os.path.join(self.path, "graphic_s_" + self.scenario + self.num_antennas + ".png")
        # plt.savefig(fig1_path)

        # plt.figure()
        # plt.scatter(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', s=3, alpha=0.7, c = 'blue')
        # plt.scatter(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', s=3, alpha=0.7, c = 'red')
        # plt.xlabel('x position [mm]')
        # plt.ylabel('y position [mm]')
        # # plt.title('Comparación de Ruta Real y Ruta Predicha')
        # plt.legend()
        # plt.xlim(-1500, 1500)
        # plt.ylim(1500, 4500)
        # plt.grid(False)
        # fig2_path = os.path.join(self.path, "graphic_l_" + self.scenario + self.num_antennas + ".png")
        # plt.savefig(fig2_path)

        plt.figure()
        plt.scatter(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', s=3, alpha=0.7, c = 'blue')
        plt.scatter(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', s=3, alpha=0.7, c = 'red')
        plt.xlabel('x position [mm]')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Ruta Real y Ruta Predicha')
        plt.legend()
        plt.xlim(-1400, -250)
        plt.ylim(2900, 4000)
        plt.grid(False)
        fig1_path = os.path.join(self.path, "graphic_s_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig1_path)

        plt.figure()
        plt.scatter(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', s=3, alpha=0.7, c = 'blue')
        plt.scatter(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', s=3, alpha=0.7, c = 'red')
        plt.xlabel('x position [mm]')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Ruta Real y Ruta Predicha')
        plt.legend()
        plt.xlim(-1500, 1500)
        plt.ylim(1500, 4500)
        plt.grid(False)
        fig2_path = os.path.join(self.path, "graphic_l_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig2_path)

        # Figuras con real, predicted por la Red neuronal, predicted por el filtro de Kalman
        plt.figure()
        plt.scatter(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', s=3, alpha=0.7, c = 'blue')
        plt.scatter(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', s=3, alpha=0.7, c = 'red')
        plt.scatter(self.df_positions["KalmanX"], self.df_positions["KalmanY"], label='Kalman Filter', s=3, alpha=0.7, c = 'green')
        plt.xlabel('x position [mm]')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Ruta Real, Ruta Predicha por la Red Neuronal y Ruta Predicha por el Filtro de Kalman')
        plt.legend()
        plt.xlim(-1400, -250)
        plt.ylim(2900, 4000)
        plt.grid(False)
        fig3_path = os.path.join(self.path, "graphic_s_kalman_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig3_path)

        plt.figure()
        plt.scatter(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', s=3, alpha=0.7, c = 'blue')
        plt.scatter(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', s=3, alpha=0.7, c = 'red')
        plt.scatter(self.df_positions["KalmanX"], self.df_positions["KalmanY"], label='Kalman Filter', s=3, alpha=0.7, c = 'green')
        plt.xlabel('x position [mm]')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Ruta Real, Ruta Predicha por la Red Neuronal y Ruta Predicha por el Filtro de Kalman')
        plt.legend()
        plt.xlim(-1500, 1500)
        plt.ylim(1500, 4500)
        plt.grid(False)
        fig4_path = os.path.join(self.path, "graphic_l_kalman_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig4_path)

        # Además, quiero una gráfica que muestre la linea de la ruta real, la ruta predicha por la red neuronal y la ruta predicha por el filtro de Kalman
        plt.figure()
        plt.plot(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', alpha=0.7, c = 'blue')
        plt.plot(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', alpha=0.7, c = 'red')
        plt.plot(self.df_positions["KalmanX"], self.df_positions["KalmanY"], label='Kalman Filter', alpha=0.7, c = 'green')
        plt.xlabel('x position [mm]')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Ruta Real, Ruta Predicha por la Red Neuronal y Ruta Predicha por el Filtro de Kalman')
        plt.legend()
        plt.xlim(-1400, -250)
        plt.ylim(2900, 4000)
        plt.grid(False)
        fig5_path = os.path.join(self.path, "graphic_s_kalman_line_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig5_path)

        plt.figure()
        plt.plot(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', alpha=0.7, c = 'blue')
        plt.plot(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', alpha=0.7, c = 'red')
        plt.plot(self.df_positions["KalmanX"], self.df_positions["KalmanY"], label='Kalman Filter', alpha=0.7, c = 'green')
        plt.xlabel('x position [mm]')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Ruta Real, Ruta Predicha por la Red Neuronal y Ruta Predicha por el Filtro de Kalman')
        plt.legend()
        plt.xlim(-1500, 1500)
        plt.ylim(1500, 4500)
        plt.grid(False)
        fig6_path = os.path.join(self.path, "graphic_l_kalman_line_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig6_path)

        # Ahora, quiero analizar por un lado la posición X: Real, Predicha por la Red Neuronal y Predicha por el Filtro de Kalman
        plt.figure()
        plt.plot(self.df_positions["RealX"], label='Ground truth', alpha=0.7, c = 'blue')
        plt.plot(self.df_positions["PredictedX"], label='Prediction', alpha=0.7, c = 'red')
        plt.plot(self.df_positions["KalmanX"], label='Kalman Filter', alpha=0.7, c = 'green')
        plt.xlabel('Time')
        plt.ylabel('x position [mm]')
        # plt.title('Comparación de Posición X Real, Predicha por la Red Neuronal y Predicha por el Filtro de Kalman')
        plt.legend()
        plt.grid(False)
        fig7_path = os.path.join(self.path, "graphic_x_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig7_path)

        # Ahora, quiero analizar por un lado la posición Y: Real, Predicha por la Red Neuronal y Predicha por el Filtro de Kalman
        plt.figure()
        plt.plot(self.df_positions["RealY"], label='Ground truth', alpha=0.7, c = 'blue')
        plt.plot(self.df_positions["PredictedY"], label='Prediction', alpha=0.7, c = 'red')
        plt.plot(self.df_positions["KalmanY"], label='Kalman Filter', alpha=0.7, c = 'green')
        plt.xlabel('Time')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Posición Y Real, Predicha por la Red Neuronal y Predicha por el Filtro de Kalman')
        plt.legend()
        plt.grid(False)
        fig8_path = os.path.join(self.path, "graphic_y_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig8_path)

    def generate_plots_tc3(self):
        # plt.figure()
        # plt.scatter(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', s=3, alpha=0.7, c = 'blue')
        # plt.scatter(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', s=3, alpha=0.7, c = 'red')
        # plt.xlabel('x position [mm]')
        # plt.ylabel('y position [mm]')
        # # plt.title('Comparación de Ruta Real y Ruta Predicha')
        # plt.legend()
        # plt.xlim(-1250, -450)
        # plt.ylim(2900, 3900)
        # plt.grid(False)
        # fig1_path = os.path.join(self.path, "graphic_s_" + self.scenario + self.num_antennas + ".png")
        # plt.savefig(fig1_path)

        # plt.figure()
        # plt.scatter(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', s=3, alpha=0.7, c = 'blue')
        # plt.scatter(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', s=3, alpha=0.7, c = 'red')
        # plt.xlabel('x position [mm]')
        # plt.ylabel('y position [mm]')
        # # plt.title('Comparación de Ruta Real y Ruta Predicha')
        # plt.legend()
        # plt.xlim(-1500, 1500)
        # plt.ylim(1500, 4500)
        # plt.grid(False)
        # fig2_path = os.path.join(self.path, "graphic_l_" + self.scenario + self.num_antennas + ".png")
        # plt.savefig(fig2_path)

        plt.figure()
        plt.scatter(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', s=3, alpha=0.7, c = 'blue')
        plt.scatter(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', s=3, alpha=0.7, c = 'red')
        plt.xlabel('x position [mm]')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Ruta Real y Ruta Predicha')
        plt.legend()
        plt.xlim(-1250, -450)
        plt.ylim(2900, 3900)
        plt.grid(False)
        fig1_path = os.path.join(self.path, "graphic_s_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig1_path)

        plt.figure()
        plt.scatter(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', s=3, alpha=0.7, c = 'blue')
        plt.scatter(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', s=3, alpha=0.7, c = 'red')
        plt.xlabel('x position [mm]')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Ruta Real y Ruta Predicha')
        plt.legend()
        plt.xlim(-1500, 1500)
        plt.ylim(1500, 4500)
        plt.grid(False)
        fig2_path = os.path.join(self.path, "graphic_l_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig2_path)

        # Figuras con real, predicted por la Red neuronal, predicted por el filtro de Kalman
        plt.figure()
        plt.scatter(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', s=3, alpha=0.7, c = 'blue')
        plt.scatter(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', s=3, alpha=0.7, c = 'red')
        plt.scatter(self.df_positions["KalmanX"], self.df_positions["KalmanY"], label='Kalman Filter', s=3, alpha=0.7, c = 'green')
        plt.xlabel('x position [mm]')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Ruta Real, Ruta Predicha por la Red Neuronal y Ruta Predicha por el Filtro de Kalman')
        plt.legend()
        plt.xlim(-1250, -450)
        plt.ylim(2900, 3900)
        plt.grid(False)
        fig3_path = os.path.join(self.path, "graphic_s_kalman_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig3_path)

        plt.figure()
        plt.scatter(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', s=3, alpha=0.7, c = 'blue')
        plt.scatter(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', s=3, alpha=0.7, c = 'red')
        plt.scatter(self.df_positions["KalmanX"], self.df_positions["KalmanY"], label='Kalman Filter', s=3, alpha=0.7, c = 'green')
        plt.xlabel('x position [mm]')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Ruta Real, Ruta Predicha por la Red Neuronal y Ruta Predicha por el Filtro de Kalman')
        plt.legend()
        plt.xlim(-1500, 1500)
        plt.ylim(1500, 4500)
        plt.grid(False)
        fig4_path = os.path.join(self.path, "graphic_l_kalman_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig4_path)

        # Además, quiero una gráfica que muestre la linea de la ruta real, la ruta predicha por la red neuronal y la ruta predicha por el filtro de Kalman
        plt.figure()
        plt.plot(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', alpha=0.7, c = 'blue')
        plt.plot(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', alpha=0.7, c = 'red')
        plt.plot(self.df_positions["KalmanX"], self.df_positions["KalmanY"], label='Kalman Filter', alpha=0.7, c = 'green')
        plt.xlabel('x position [mm]')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Ruta Real, Ruta Predicha por la Red Neuronal y Ruta Predicha por el Filtro de Kalman')
        plt.legend()
        plt.xlim(-1250, -450)
        plt.ylim(2900, 3900)
        plt.grid(False)
        fig5_path = os.path.join(self.path, "graphic_s_kalman_line_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig5_path)

        plt.figure()
        plt.plot(self.df_positions["RealX"], self.df_positions["RealY"], label='Ground truth', alpha=0.7, c = 'blue')
        plt.plot(self.df_positions["PredictedX"], self.df_positions["PredictedY"], label='Prediction', alpha=0.7, c = 'red')
        plt.plot(self.df_positions["KalmanX"], self.df_positions["KalmanY"], label='Kalman Filter', alpha=0.7, c = 'green')
        plt.xlabel('x position [mm]')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Ruta Real, Ruta Predicha por la Red Neuronal y Ruta Predicha por el Filtro de Kalman')
        plt.legend()
        plt.xlim(-1500, 1500)
        plt.ylim(1500, 4500)
        plt.grid(False)
        fig6_path = os.path.join(self.path, "graphic_l_kalman_line_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig6_path)

        # Ahora, quiero analizar por un lado la posición X: Real, Predicha por la Red Neuronal y Predicha por el Filtro de Kalman
        plt.figure()
        plt.plot(self.df_positions["RealX"], label='Ground truth', alpha=0.7, c = 'blue')
        plt.plot(self.df_positions["PredictedX"], label='Prediction', alpha=0.7, c = 'red')
        plt.plot(self.df_positions["KalmanX"], label='Kalman Filter', alpha=0.7, c = 'green')
        plt.xlabel('Time')
        plt.ylabel('x position [mm]')
        # plt.title('Comparación de Posición X Real, Predicha por la Red Neuronal y Predicha por el Filtro de Kalman')
        plt.legend()
        plt.grid(False)
        fig7_path = os.path.join(self.path, "graphic_x_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig7_path)

        # Ahora, quiero analizar por un lado la posición Y: Real, Predicha por la Red Neuronal y Predicha por el Filtro de Kalman
        plt.figure()
        plt.plot(self.df_positions["RealY"], label='Ground truth', alpha=0.7, c = 'blue')
        plt.plot(self.df_positions["PredictedY"], label='Prediction', alpha=0.7, c = 'red')
        plt.plot(self.df_positions["KalmanY"], label='Kalman Filter', alpha=0.7, c = 'green')
        plt.xlabel('Time')
        plt.ylabel('y position [mm]')
        # plt.title('Comparación de Posición Y Real, Predicha por la Red Neuronal y Predicha por el Filtro de Kalman')
        plt.legend()
        plt.grid(False)
        fig8_path = os.path.join(self.path, "graphic_y_" + self.scenario + self.num_antennas + ".png")
        plt.savefig(fig8_path)






